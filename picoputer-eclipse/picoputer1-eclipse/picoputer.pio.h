// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// picoputerclk //
// ------------ //

#define picoputerclk_wrap_target 1
#define picoputerclk_wrap 2

static const uint16_t picoputerclk_program_instructions[] = {
    0xe081, //  0: set    pindirs, 1                 
            //     .wrap_target
    0xe001, //  1: set    pins, 1                    
    0xe000, //  2: set    pins, 0                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program picoputerclk_program = {
    .instructions = picoputerclk_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config picoputerclk_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + picoputerclk_wrap_target, offset + picoputerclk_wrap);
    return c;
}

// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
void picoputerclk_program_init(PIO pio, uint sm, uint offset, uint pin) {
   pio_gpio_init(pio, pin);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
   pio_sm_config c = picoputerclk_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin, 1);
  float div = (float)clock_get_hz(clk_sys) / 10000000.0;
  sm_config_set_clkdiv(&c, div);
   pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// ---------------- //
// picoputerlinkout //
// ---------------- //

#define picoputerlinkout_wrap_target 0
#define picoputerlinkout_wrap 5

static const uint16_t picoputerlinkout_program_instructions[] = {
            //     .wrap_target
    0xb842, //  0: nop                    side 1     
    0x9fa0, //  1: pull   block           side 1 [7] 
    0xf729, //  2: set    x, 9            side 0 [7] 
    0x6001, //  3: out    pins, 1                    
    0x0643, //  4: jmp    x--, 3                 [6] 
    0x0701, //  5: jmp    1                      [7] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program picoputerlinkout_program = {
    .instructions = picoputerlinkout_program_instructions,
    .length = 6,
    .origin = -1,
};

static inline pio_sm_config picoputerlinkout_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + picoputerlinkout_wrap_target, offset + picoputerlinkout_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

#include "hardware/clocks.h"
static inline void picoputerlinkout_program_init(PIO pio, uint sm, uint offset, uint pin_linkout) {
    // Tell PIO to initially drive output-high on the selected pin, then map PIO
    // onto that pin with the IO muxes.
    pio_sm_set_pins_with_mask(pio, sm, 0u << pin_linkout, 0u << pin_linkout);
    pio_sm_set_pindirs_with_mask(pio, sm, 1u << pin_linkout, 1u << pin_linkout);
    pio_gpio_init(pio, pin_linkout);
    pio_sm_config c = picoputerlinkout_program_get_default_config(offset);
    // OUT shifts to right, no autopull
    sm_config_set_out_shift(&c, true, false, 32);
    // We are mapping both OUT and side-set to the same pin, because sometimes
    // we need to assert user data onto the pin (with OUT) and sometimes
    // assert constant values (start/stop bit)
    sm_config_set_out_pins(&c, pin_linkout, 1);
    sm_config_set_sideset_pins(&c, pin_linkout);
    // We only need TX, so get an 8-deep FIFO!
    // sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // SM transmits 1 bit per 8 execution cycles. We therefore use a
    // clock of 80MHz
    float div = (float)clock_get_hz(clk_sys) / 80000000;
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
// Sends an 11 bit packet to the link out pin
// The 11 pin packet is used so we can send both data packets and ACK packets
//
void picoputerlinkout_program_putc(PIO pio, uint sm, int c)
{
  pio_sm_put_blocking(pio, sm, (uint32_t)c);
}

#endif

// --------------- //
// picoputerlinkin //
// --------------- //

#define picoputerlinkin_wrap_target 0
#define picoputerlinkin_wrap 4

static const uint16_t picoputerlinkin_program_instructions[] = {
            //     .wrap_target
    0x2020, //  0: wait   0 pin, 0                   
    0xea29, //  1: set    x, 9                   [10]
    0x4001, //  2: in     pins, 1                    
    0x0642, //  3: jmp    x--, 2                 [6] 
    0x8020, //  4: push   block                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program picoputerlinkin_program = {
    .instructions = picoputerlinkin_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config picoputerlinkin_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + picoputerlinkin_wrap_target, offset + picoputerlinkin_wrap);
    return c;
}

static inline void picoputerlinkin_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_gpio_init(pio, pin);
    gpio_pull_up(pin);
    pio_sm_config c = picoputerlinkin_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin); // for WAIT, IN
    sm_config_set_jmp_pin(&c, pin); // for JMP
    // Shift to right, autopull disabled
    sm_config_set_in_shift(&c, true, false, 32);
    // SM transmits 1 bit per 8 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / 80000000;
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
 uint32_t picoputerlinkin_get(PIO pio, uint sm)
{
  // read entire FIFO word
  io_rw_32 *rxfifo_shift = (io_rw_32*)&pio->rxf[sm];
  if (pio_sm_is_rx_fifo_empty(pio, sm))
    {
      // 0 indicates no data
      return 0;
    }
  // Set LSB to indicate data present
  return ((uint32_t)*rxfifo_shift) | 1;
}

#endif

